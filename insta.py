from instaclient import InstaClient
from instaclient.errors import *
from credentials import *
import os

# SCRAPE VARIABLES
# scrape_username = "USERNAME_TO_SCRAPE"
scrape_username = input("Enter an Instagram account's username to scrape it's data: ")

# ! SCRAPING

# Create a instaclient object. Place as driver_path argument the path that leads to where you saved the chromedriver.exe file
# client = InstaClient(driver_path='G:\Programming\insta-follow-tracker\chromedriver.exe', localhost_headless=True)
client = InstaClient(driver_path='G:\Programming\insta-follow-tracker\chromedriver.exe')

try:
    client.login(username=username, password=password) # Go through Login Procedure
except VerificationCodeNecessary:
    # This error is raised if the user has 2FA turned on.
    code = input('Enter the 2FA security code generated by your Authenticator App or sent to you by SMS')
    client.input_verification_code(code)
except SuspisciousLoginAttemptError as error:
    # This error is reaised by Instagram
    if error.mode == SuspisciousLoginAttemptError.EMAIL:
        code = input('Enter the security code that was sent to you via email: ')
    else:
        code = input('Enter the security code that was sent to you via SMS: ')
    client.input_security_code(code)



# Scrape Instagram followers
try:
    # Scrapes the users followers into a Tuple.
    followers = client.get_followers(user=scrape_username, count=None, use_api=False, callback_frequency=25)
    # Changing from Tuple to List
    followers = followers[0]
except InvalidUserError:
    # Exception raised if the username is not valid
    print('The username is not valid')
except PrivateAccountError:
    # Exception raised if the account you are trying to scrape is private
    print('{} is a private account'.format(username))
except:
    client.disconnect()

# Scrape Instagram following
try:
    # Try to get the users following the
    following = client.get_following(user=scrape_username, count=None, use_api=False, callback_frequency=25)
    # Changing from Tuple to List
    following = following[0]
except InvalidUserError:
    # Exception raised if the username is not valid
    print('The username is not valid')
except PrivateAccountError:
    # Exception raised if the account you are trying to scrape is private
    print('{} is a private account'.format(username))
except:
    client.disconnect()

not_two_way = list((set(following) ^ set(followers)))

following_me_only = list((set(not_two_way) ^ set(following)))
following_them_only = list((set(not_two_way) ^ set(followers)))

print(following_me_only)
print(following_them_only)

client.disconnect()

