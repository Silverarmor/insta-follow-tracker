from instaclient import InstaClient
from instaclient.errors import *
from credentials import *
from selenium import webdriver
import os

# SCRAPE VARIABLES
scrape_username = "USERNAME_TO_SCRAPE"
# scrape_username = input("Enter an Instagram account's username to scrape it's data: ")


# !  SERVER options
chrome_options = webdriver.ChromeOptions()

## LINUX ONLY, disables sandbox
# chrome_options.add_argument("--no-sandbox")

## If enabled, does NOT open the webdriver
chrome_options.add_argument("--headless")
## If running headless, disables the GPU.
chrome_options.add_argument("--disable-gpu")
# General fixes
chrome_options.add_argument("--disable-extensions")
chrome_options.add_argument("--disable-dev-shm-usage")

# # ENVIRONMENT VARIALBES
# chrome_options.binary_location = os.environ.get("GOOGLE_CHROME_BIN")
# driver = webdriver.Chrome(executable_path=os.environ.get("CHROMEDRIVER_PATH"), chrome_options=chrome_options)

# ! SCRAPING

# Create a instaclient object. Place as driver_path argument the path that leads to where you saved the chromedriver.exe file
client = InstaClient(driver_path='G:\Programming\insta-follow-tracker\chromedriver.exe')
# client = InstaClient()

try:
    client.login(username=username, password=password) # Go through Login Procedure
except VerificationCodeNecessary:
    # This error is raised if the user has 2FA turned on.
    code = input('Enter the 2FA security code generated by your Authenticator App or sent to you by SMS')
    client.input_verification_code(code)
except SuspisciousLoginAttemptError as error:
    # This error is reaised by Instagram
    if error.mode == SuspisciousLoginAttemptError.EMAIL:
        code = input('Enter the security code that was sent to you via email: ')
    else:
        code = input('Enter the security code that was sent to you via SMS: ')
    client.input_security_code(code)



# Scrape Instagram followers
try:
    # This will try to get the user's first 100 followers
    followers = client.get_followers(user=scrape_username, count=None, use_api=False, callback_frequency=25)
    print(followers)
    print(type(followers))
except InvalidUserError:
    # Exception raised if the username is not valid
    print('The username is not valid')
except PrivateAccountError:
    # Exception raised if the account you are trying to scrape is private
    print('{} is a private account'.format(username))
except:
    client.quit()

# Scrape Instagram following
try:
    # Try to get the users following the
    following = client.get_following(user=scrape_username, count=None, use_api=False, callback_frequency=25)
    print(following)
    print(type(following))
except InvalidUserError:
    # Exception raised if the username is not valid
    print('The username is not valid')
except PrivateAccountError:
    # Exception raised if the account you are trying to scrape is private
    print('{} is a private account'.format(username))
except:
    client.quit()


client.quit()